const logger = require('./logger');

class AppError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

const errorHandler = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  if (process.env.NODE_ENV === 'development') {
    res.status(err.statusCode).json({
      status: err.status,
      error: err,
      message: err.message,
      stack: err.stack
    });
  } else {
    // –ü—Ä–æ–¥–∞–∫—à–µ–Ω
    if (err.isOperational) {
      res.status(err.statusCode).json({
        status: err.status,
        message: err.message
      });
    } else {
      // –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –æ—à–∏–±–∫–∏
      logger.error('ERROR üí•', err);
      res.status(500).json({
        status: 'error',
        message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!'
      });
    }
  }
};

const handleValidationError = (err) => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `–ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

const handleDuplicateFieldsDB = (err) => {
  const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
  const message = `–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è ${value} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!`;
  return new AppError(message, 400);
};

const handleCastErrorDB = (err) => {
  const message = `–ù–µ–≤–µ—Ä–Ω—ã–π ${err.path}: ${err.value}`;
  return new AppError(message, 400);
};

const handleJWTError = () => new AppError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞!', 401);

const handleJWTExpiredError = () => new AppError('–í–∞—à —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', 401);

module.exports = {
  AppError,
  errorHandler,
  handleValidationError,
  handleDuplicateFieldsDB,
  handleCastErrorDB,
  handleJWTError,
  handleJWTExpiredError
}; 