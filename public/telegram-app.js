// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tg = window.Telegram.WebApp;
let user = null;
let config = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const response = await fetch('/api/telegram/init', {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        const data = await response.json();
        
        user = data.user;
        config = data.config;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        tg.MainButton.setText(config.mainButtonText);
        tg.MainButton.setColor(config.mainButtonColor);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await loadInitialData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        tg.MainButton.show();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const giftsResponse = await fetch('/api/telegram/gifts', {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        const gifts = await giftsResponse.json();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsResponse = await fetch('/api/telegram/stats', {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        const stats = await statsResponse.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateGiftsList(gifts);
        updateStats(stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
function updateGiftsList(gifts) {
    const container = document.getElementById('gifts-list');
    if (!container) return;
    
    container.innerHTML = gifts.map(gift => `
        <div class="gift-card" data-id="${gift.id}">
            <div class="gift-image">
                <img src="${gift.backgroundUrl}" alt="${gift.name}">
                <div class="gift-stats">
                    <span>üëÅÔ∏è ${gift.stats.views}</span>
                    <span>üí∞ ${gift.stats.sales}</span>
                    <span>‚≠ê ${gift.stats.rating.toFixed(1)}</span>
                </div>
            </div>
            <div class="gift-info">
                <h3>${gift.name}</h3>
                <p>${gift.description}</p>
                <div class="gift-price">${gift.price} TON</div>
                <div class="gift-actions">
                    <button onclick="editGift('${gift.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="deleteGift('${gift.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(stats) {
    const container = document.getElementById('stats-container');
    if (!container) return;
    
    container.innerHTML = `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">${stats.totalGifts}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${stats.activeGifts}</div>
                <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${stats.totalSales}</div>
                <div class="stat-label">–ü—Ä–æ–¥–∞–∂</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${stats.totalRevenue} TON</div>
                <div class="stat-label">–î–æ—Ö–æ–¥</div>
            </div>
        </div>
        <div class="recent-deals">
            <h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</h3>
            ${stats.recentDeals.map(deal => `
                <div class="deal-item">
                    <div class="deal-info">
                        <div class="deal-gift">${deal.gift.name}</div>
                        <div class="deal-amount">${deal.amount} TON</div>
                    </div>
                    <div class="deal-date">${new Date(deal.createdAt).toLocaleDateString()}</div>
                </div>
            `).join('')}
        </div>
    `;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
async function createGift(formData) {
    try {
        const response = await fetch('/api/telegram/gifts', {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': tg.initData
            },
            body: formData
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞');
        }
        
        const gift = await response.json();
        showSuccess('–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        await loadInitialData();
        return gift;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞');
        throw error;
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
async function editGift(giftId) {
    try {
        const gift = await fetch(`/api/telegram/gifts/${giftId}`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        }).then(res => res.json());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        showEditForm(gift);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
async function deleteGift(giftId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫?')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/telegram/gifts/${giftId}`, {
            method: 'DELETE',
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞');
        }
        
        showSuccess('–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        await loadInitialData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞');
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showSuccess(message) {
    tg.showAlert(message);
}

function showError(message) {
    tg.showAlert(message);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram
tg.MainButton.onClick(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞
    showCreateForm();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.createGift = createGift;
window.editGift = editGift;
window.deleteGift = deleteGift;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏
function showCreateForm() {
    const form = document.getElementById('create-gift-form');
    form.style.display = 'flex';
    tg.MainButton.hide();
}

function closeCreateForm() {
    const form = document.getElementById('create-gift-form');
    form.style.display = 'none';
    tg.MainButton.show();
}

function showEditForm(gift) {
    const form = document.getElementById('edit-gift-form');
    const idInput = document.getElementById('edit-id');
    const nameInput = document.getElementById('edit-name');
    const descriptionInput = document.getElementById('edit-description');
    const priceInput = document.getElementById('edit-price');
    const categoryInput = document.getElementById('edit-category');
    
    idInput.value = gift.id;
    nameInput.value = gift.name;
    descriptionInput.value = gift.description;
    priceInput.value = gift.price;
    categoryInput.value = gift.category;
    
    form.style.display = 'flex';
    tg.MainButton.hide();
}

function closeEditForm() {
    const form = document.getElementById('edit-gift-form');
    form.style.display = 'none';
    tg.MainButton.show();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º
async function handleGiftSubmit(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    
    try {
        await createGift(formData);
        closeCreateForm();
        form.reset();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:', error);
    }
}

async function handleEditSubmit(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData(form);
    const giftId = formData.get('id');
    
    try {
        const response = await fetch(`/api/telegram/gifts/${giftId}`, {
            method: 'PUT',
            headers: {
                'X-Telegram-Init-Data': tg.initData
            },
            body: formData
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞');
        }
        
        showSuccess('–ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        closeEditForm();
        await loadInitialData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞:', error);
        showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
document.addEventListener('click', (event) => {
    if (event.target.classList.contains('modal')) {
        if (event.target.id === 'create-gift-form') {
            closeCreateForm();
        } else if (event.target.id === 'edit-gift-form') {
            closeEditForm();
        }
    }
});

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.querySelectorAll('.modal-content').forEach(content => {
    content.addEventListener('click', (event) => {
        event.stopPropagation();
    });
}); 